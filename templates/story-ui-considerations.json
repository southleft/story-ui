{
  "libraryName": "Your Component Library",
  "importPath": "your-import-path",
  "description": "Brief description of your component library and its design philosophy",

  "corePrinciples": [
    "Add fundamental principles of your design system",
    "E.g., 'Always use design tokens for spacing'",
    "E.g., 'Prefer composition over complex components'"
  ],

  "componentRules": {
    "layout": {
      "description": "How layouts should be structured",
      "rules": [
        "Use Grid component for multi-column layouts",
        "Wrap content in Container for consistent padding"
      ],
      "examples": {
        "twoColumn": "<Grid cols={2}><GridItem>...</GridItem><GridItem>...</GridItem></Grid>",
        "responsive": "<Grid cols={{ base: 1, md: 2, lg: 3 }}>...</Grid>"
      }
    },
    "spacing": {
      "description": "Spacing and sizing system",
      "rules": [
        "Use spacing tokens (space-1, space-2, etc.)",
        "Never use raw pixel values"
      ],
      "validValues": ["space-1", "space-2", "space-4", "space-8", "space-16"]
    },
    "colors": {
      "description": "Color system usage",
      "rules": [
        "Use semantic color tokens (primary, secondary, etc.)",
        "Avoid hex codes or rgb values"
      ],
      "validValues": ["primary", "secondary", "success", "warning", "error"]
    },
    "typography": {
      "description": "Typography rules",
      "rules": [
        "Use Text component for all text",
        "Use semantic size props (sm, md, lg)"
      ]
    }
  },

  "imports": {
    "primary": {
      "path": "main-package",
      "components": ["Component1", "Component2", "Component3"],
      "description": "Main components imported from the primary package"
    },
    "secondary": [
      {
        "path": "icons-package",
        "components": ["Icon1", "Icon2"],
        "when": "Only when using icons",
        "example": "import { Icon1 } from 'icons-package';"
      },
      {
        "path": "utils-package",
        "components": ["util1", "util2"],
        "when": "For specific utilities",
        "example": "import { util1 } from 'utils-package';"
      }
    ]
  },

  "patterns": {
    "card": {
      "description": "Standard card pattern",
      "correct": "<Card><CardHeader>Title</CardHeader><CardBody>Content</CardBody></Card>",
      "incorrect": "<div className='card'>...</div>",
      "notes": "Always use Card components, never divs with classes"
    },
    "form": {
      "description": "Form layout pattern",
      "correct": "<Form><FormField label='Name'><Input /></FormField></Form>",
      "incorrect": "<form><label>Name</label><input /></form>",
      "notes": "Use Form components for proper validation and styling"
    },
    "grid": {
      "description": "Grid layout pattern",
      "correct": "<Grid cols={3} gap='space-4'>...</Grid>",
      "incorrect": "<div style={{display: 'grid'}}>...</div>",
      "notes": "Use Grid component with tokens for gaps"
    }
  },

  "dos": [
    "Use design tokens for all spacing, colors, and sizes",
    "Import components from the official package",
    "Follow composition patterns",
    "Use semantic props (size='lg' not style={{fontSize: '24px'}})"
  ],

  "donts": [
    "Don't use raw HTML elements when components exist",
    "Don't use inline styles with pixel values",
    "Don't import from internal/private paths",
    "Don't mix different component libraries"
  ],

  "specialConsiderations": [
    "Component X requires prop Y to be set when using feature Z",
    "Always wrap Component A in Provider B",
    "Theme must be configured before using color props"
  ],

  "commonMistakes": [
    {
      "issue": "Using HTML div instead of View/Box component",
      "wrong": "<div>Content</div>",
      "correct": "<View>Content</View>",
      "explanation": "Native HTML elements don't respect the design system"
    },
    {
      "issue": "Raw pixel values in spacing",
      "wrong": "margin: '10px'",
      "correct": "margin='space-2'",
      "explanation": "Design tokens ensure consistent spacing"
    }
  ],

  "aiInstructions": {
    "general": [
      "Always prefer composition over creating complex single components",
      "Use the design system's patterns, don't create custom solutions",
      "When unsure, check the examples in this file"
    ],
    "codeGeneration": [
      "Start with imports from the main package",
      "Use proper TypeScript types when available",
      "Include accessibility props (aria-labels, etc.)"
    ],
    "testing": [
      "Generated components should be testable",
      "Include data-testid props where appropriate"
    ]
  },

  "examplePrompts": {
    "good": [
      "Create a card with title and description",
      "Build a two-column layout with cards",
      "Make a form with name and email fields"
    ],
    "clarificationNeeded": [
      "Make it pretty -> Specify which components and layout",
      "Add some buttons -> Specify button types and actions",
      "Create a dashboard -> Break down into specific components"
    ]
  }
}
