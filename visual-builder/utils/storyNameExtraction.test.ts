/**
 * Test cases for enhanced story name extraction
 * This verifies that the Visual Builder properly extracts story names
 * from various story formats and never prompts when editing existing stories.
 */

import { extractStoryName } from './storyToBuilder';

describe('Enhanced Story Name Extraction', () => {
  
  test('extracts name from export const statement', () => {
    const storyCode = `
      import React from 'react';
      import { Button, Card } from '@mantine/core';
      
      export const LoginButton = {
        render: () => (
          <Card>
            <Button>Login</Button>
          </Card>
        )
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('Login Button');
  });
  
  test('extracts name from title property', () => {
    const storyCode = `
      import React from 'react';
      import { Button } from '@mantine/core';
      
      export const MyStory = {
        title: "User Profile Card",
        render: () => <Button>Click me</Button>
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('User Profile Card');
  });
  
  test('extracts name from meta export default title', () => {
    const storyCode = `
      export default {
        title: "Navigation Menu",
        component: MyComponent
      };
      
      export const Default = {
        render: () => <div>Menu</div>
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('Navigation Menu');
  });
  
  test('extracts name from comment annotation', () => {
    const storyCode = `
      // @title Shopping Cart
      import React from 'react';
      
      export const CartStory = {
        render: () => <div>Cart</div>
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('Shopping Cart');
  });
  
  test('extracts name from JSDoc comment', () => {
    const storyCode = `
      /**
       * @title Product Gallery
       * @description Shows product images
       */
      export const Gallery = {
        render: () => <div>Gallery</div>
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('Product Gallery');
  });
  
  test('extracts name from component name in JSX', () => {
    const storyCode = `
      export const Example = {
        render: () => (
          <UserDashboard>
            <div>Content</div>
          </UserDashboard>
        )
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('User Dashboard');
  });
  
  test('extracts name from function export', () => {
    const storyCode = `
      export function ContactForm() {
        return <form>Contact</form>;
      }
    `;
    
    expect(extractStoryName(storyCode)).toBe('Contact Form');
  });
  
  test('handles complex PascalCase to readable conversion', () => {
    const storyCode = `
      export const MyComplexUIComponentStory = {
        render: () => <div>Complex UI</div>
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('My Complex UI Component Story');
  });
  
  test('ignores generic HTML elements', () => {
    const storyCode = `
      export const Example = {
        render: () => (
          <div>
            <span>Some text</span>
          </div>
        )
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('Example');
  });
  
  test('prefers explicit title over export name', () => {
    const storyCode = `
      export const GenericName = {
        title: "Specific Title",
        render: () => <div>Content</div>
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('Specific Title');
  });
  
  test('returns fallback for unrecognizable code', () => {
    const storyCode = `
      const someRandomCode = "hello";
      console.log(someRandomCode);
    `;
    
    expect(extractStoryName(storyCode)).toBe('Imported Story');
  });
  
  test('handles Vite-transformed code gracefully', () => {
    const storyCode = `
      import { __vite__cjsImport } from "something";
      const _jsxDEV = __vite__cjsImport.default;
      export const TransformedStory = {};
    `;
    
    expect(extractStoryName(storyCode)).toBe('Transformed Story');
  });
  
  // Real-world examples
  test('handles real Mantine story format', () => {
    const storyCode = `
      import React from 'react';
      import { Button, Card, Stack, Title } from '@mantine/core';
      
      export const UserCard = {
        render: () => (
          <Card shadow="sm" padding="lg" radius="md" withBorder>
            <Stack>
              <Title order={3}>John Doe</Title>
              <Button variant="light">View Profile</Button>
            </Stack>
          </Card>
        )
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('User Card');
  });
  
  test('handles Story UI generated format', () => {
    const storyCode = `
      // Generated by Story UI
      import React from 'react';
      import { Container, Title, Text, Button } from '@mantine/core';
      
      export const WelcomeScreen = {
        render: () => (
          <Container>
            <Title>Welcome</Title>
            <Text>Get started with our app</Text>
            <Button>Continue</Button>
          </Container>
        )
      };
    `;
    
    expect(extractStoryName(storyCode)).toBe('Welcome Screen');
  });
  
});

// Integration test for the full flow
describe('Story Name Integration', () => {
  
  test('existing story should not prompt for name', async () => {
    const existingStoryCode = `
      export const DashboardLayout = {
        title: "Admin Dashboard",
        render: () => <div>Dashboard</div>
      };
    `;
    
    const extractedName = extractStoryName(existingStoryCode);
    
    // Should extract a valid name
    expect(extractedName).toBe('Admin Dashboard');
    expect(extractedName).not.toBe('Imported Story');
    expect(extractedName).not.toBe('Untitled Story');
    
    // In the Visual Builder, this should NOT trigger a name prompt
    const isGenericName = extractedName === 'Untitled Story' || extractedName === 'Imported Story';
    expect(isGenericName).toBe(false);
  });
  
  test('new AI-generated story should work normally', () => {
    const newStoryCode = `
      // This is raw AI-generated JSX without story metadata
      import React from 'react';
      
      const MyComponent = () => (
        <div>
          <h1>Hello World</h1>
        </div>
      );
      
      export default MyComponent;
    `;
    
    const extractedName = extractStoryName(newStoryCode);
    
    // Should fall back to generic name
    expect(extractedName).toBe('Imported Story');
    
    // In the Visual Builder, this SHOULD trigger a name prompt for new stories
    const isGenericName = extractedName === 'Untitled Story' || extractedName === 'Imported Story';
    expect(isGenericName).toBe(true);
  });
  
});